import webbrowser

root = Tk()  # Criação da janela

class Relatorios():
    def printCliente(self): # Função que serve pra abrir o navegador webbrowser e aparecer o relatorio em pdf
        webbrowser.open("cliente.pdf")# Cria um pdf na pasta que está sendo direcionado
    def geraRelstorioCliente(self):
        self.c = canvas.Canvas("clientes.pdf")
    # Criando variaveis para alimentar o relatorio
        self.codigoRel = self.codigo.entry.get()
        self.nomeRel = self.nome.entry.get()
        self.foneRel = self.fone.entry.get()
        self.cidadeRel = self.cidade.entry.get()

        # Relatorio
        self.c.setFont("Helvetica-Bold", 24)
        self.c.drawString(200, 790, 'Ficha do Cliente')

        self.c.setFont("Helvetica-Bold", 18)
        self.c.drawString(50, 700, 'Codigo: ')
        self.c.drawString(50, 670, 'Nome: ')
        self.c.drawString(50, 630, 'Telefone: ')
        self.c.drawString(50, 600, 'Cidade: ')

        self.c.setFont("Helvetica-Bold", 18)
        self.c.drawString(150, 700, self.codigoRel)
        self.c.drawString(150, 670, self.nomeRel)
        self.c.drawString(150, 630, self.foneRel)
        self.c.drawString(150, 600, self.cidadeRel)

        self.c.rect(20, 720, 550, 5, fill=True, stroke=False)


        self.c.showPage()
        self.c.save()
        self.printCliente()



class Func():  # Criando a classe limpar
    def limpa_tela(self):  # Criando Função Limpar
        self.codigo_entry.delete(0, END)
        self.nome_entry.delete(0, END)
        self.fone_entry.delete(0, END)
        self.cidade_entry.delete(0, END)

    ###Criando um pequeno banco de dados
    def conecta_bd(self):  # conecta com o banco de dados
        self.conn = sqlite3.connect('clientes.bd')
        self.cursor = self.conn.cursor()

    def desconecta_bd(self):  # desconecta com o banco de dados
        self.conn.close()

    ###Criando banco de dados
    def montaTabelas(self):
        self.conecta_bd()
        print("Conectando ao banco de dados")
        ### Criando tabela
        self.cursor.execute("""
                 CREATE TABLE IF NOT EXISTS clientes (
                     cod INTEGER PRIMARY KEY,
                     nome_cliente CHAR(40) NOT NULL, 
                     telefone INTEGER(20),
                     cidade CHAR(40)
                 );
        """)
        ###validando banco de dados
        self.conn.commit()
        print("Banco de dados criado")
        self.desconecta_bd()
        print("Desconectando Banco de dados")

    def variaveis(self):
        self.codigo = self.codigo_entry.get()
        self.nome = self.nome_entry.get()
        self.fone = self.fone_entry.get()
        self.cidade = self.cidade_entry.get()

    def add_cliente(self):  ###cadastro do cliente
        self.variaveis()  # chama as variaveis
        self.conecta_bd()  ##função que chama SQLITE

        ###função que executa o SQL
        self.cursor.execute(""" INSERT INTO clientes (nome_cliente, telefone, cidade)
                   VALUES (?, ?, ?)""", (self.nome, self.fone, self.cidade))
        self.conn.commit()
        self.desconecta_bd()
        self.select_lista()
        self.limpa_tela()

    def select_lista(self):
        self.listaCli.delete(*self.listaCli.get_children())
        self.conecta_bd()
        lista = self.cursor.execute(""" SELECT cod, nome_cliente, telefone, cidade FROM clientes
                    ORDER BY nome_cliente ASC; """)
        for i in lista:
            self.listaCli.insert("", END, values=i)
        self.desconecta_bd()

    def deleta_cliente(self):
        self.variaveis()
        self.conecta_bd()
        self.cursor.execute("""DELETE FROM clientes WHERE cod = ? """, (self.codigo,))  # deleta o codigo do cliente
        self.conn.commit()
        self.desconecta_bd()
        self.limpa_tela()
        self.select_lista()

    def OndoubleClick(self, event):  # duplo click
        self.limpa_tela() #seleciona os itens que der o duplo click e puxa os dados para a memoria
        self.listaCli.selection() #seleciona as informações da lista

        for n in self.listaCli.selection(): #criando um for para extrair os dados
            col1, col2, col3, col4 = self.listaCli.item(n, 'values') #numerando as colunas e extraindo os itens
            self.codigo_entry.insert(END, col1)
            self.nome_entry.insert(END, col2)
            self.fone_entry.insert(END, col3)
            self.cidade_entry.insert(END, col4)

    def alterar_cliente(self):
        self.variaveis()
        self.conecta_bd()
        self.cursor.execute(""" UPDATE clientes SET nome_cliente = ?, telefone = ?, cidade = ?
            WHERE cod = ? """, (self.nome, self.fone, self.cidade, self.codigo))
        self.conn.commit()
        self.desconecta_bd()
        self.select_lista()
        self.limpa_tela()


class Application(Func, Relatorios):
    def __init__(self):
        self.root = root
        self.tela()
        self.frames_da_tela()
        self.criando_botoes()
        self.lista_frame2()
        self.montaTabelas()
        self.select_lista()
        self.Menus()
        root.mainloop()

    def tela(self):
        self.root.title("Cadastro de Clientes")  # titulo da tela
        self.root.configure(background='#4682B4')  # Define a cor da tela
        self.root.geometry("700x800")  # Dimensão da tela
        self.root.resizable(True, True)  # Permite a expansão da tela
        self.root.minsize(width=900, height=700)  # Define o limite de expansão da tela
        self.root.minsize(width=400, height=300)

    # Criando o frames da tela
    def frames_da_tela(self):
        self.frame1 = Frame(self.root, bd=4, bg='#D3D3D3', highlightbackground='#808080', highlightthickness=3)
        self.frame1.place(relx=0.02, rely=0.02, relwidth=0.96, relheight=0.46)

        self.frame2 = Frame(self.root, bd=4, bg='#D3D3D3', highlightbackground='#808080', highlightthickness=3)
        self.frame2.place(relx=0.02, rely=0.5, relwidth=0.96, relheight=0.46)

    def criando_botoes(self):
        ### Botão limpar
        self.bt_limpar = Button(self.frame1, text="Limpar", bd=4, bg='#D3D3D3', font=('verdana', 8, 'bold'),
                                command=self.limpa_tela)
        self.bt_limpar.place(relx=0.2, rely=0.1, relwidth=0.1, relheight=0.15)

        ### Botão buscar
        self.bt_buscar = Button(self.frame1, text="Buscar", bd=4, bg='#D3D3D3', font=('verdana', 8, 'bold'))
        self.bt_buscar.place(relx=0.3, rely=0.1, relwidth=0.1, relheight=0.15)

        ### Botão novo
        self.bt_novo = Button(self.frame1, text="Novo", bd=4, bg='#D3D3D3', font=('verdana', 8, 'bold'),command=self.add_cliente)
        self.bt_novo.place(relx=0.5, rely=0.1, relwidth=0.1, relheight=0.15)

        ### Botão alterar
        self.bt_alterar = Button(self.frame1, text="Alterar", bd=4, bg='#D3D3D3', font=('verdana', 8, 'bold'),
                                 command=self.alterar_cliente)
        self.bt_alterar.place(relx=0.6, rely=0.1, relwidth=0.1, relheight=0.15)

        ### Botão apagar
        self.bt_apagar = Button(self.frame1, text="Apagar", bd=4, bg='#D3D3D3', font=('verdana', 8, 'bold'),
                                command=self.deleta_cliente)
        self.bt_apagar.place(relx=0.7, rely=0.1, relwidth=0.1, relheight=0.15)

        # Criação das Labels e Entries

        self.lb_codigo = Label(self.frame1, text='Código', bg='#D3D3D3', font=('verdana', 8, 'bold'))  # Criação da label e entrada do codigo
        self.lb_codigo.place(relx=0.02, rely=0.04)

        self.codigo_entry = Entry(self.frame1)
        self.codigo_entry.place(relx=0.02, rely=0.1, relwidth=0.15)

        # Criação da label e entrada do nome

        self.lb_nome = Label(self.frame1, text='Nome', bg='#D3D3D3', font=('verdana', 8, 'bold'))
        self.lb_nome.place(relx=0.02, rely=0.35)

        self.nome_entry = Entry(self.frame1)
        self.nome_entry.place(relx=0.02, rely=0.41, relwidth=0.35)

        # Criação da label e entrada do telefone

        self.lb_fone = Label(self.frame1, text='Telefone', bg='#D3D3D3', font=('verdana', 8, 'bold'))
        self.lb_fone.place(relx=0.02, rely=0.48)

        self.fone_entry = Entry(self.frame1)
        self.fone_entry.place(relx=0.02, rely=0.54, relwidth=0.15)

        # Criação da label e entrada da cidade

        self.lb_cidade = Label(self.frame1, text='Cidade', bg='#D3D3D3', font=('verdana', 8, 'bold'))
        self.lb_cidade.place(relx=0.02, rely=0.61)

        self.cidade_entry = Entry(self.frame1)
        self.cidade_entry.place(relx=0.02, rely=0.68, relwidth=0.10)

    # Criação de uma lista

    def lista_frame2(self):
        self.listaCli = ttk.Treeview(self.frame2, height=3, columns=("col1", "col2", "col3", "col4"))
        self.listaCli.heading("#0", text="")  # Especificando o cabeçario
        self.listaCli.heading("#1", text="Codigo")
        self.listaCli.heading("#2", text="Nome")
        self.listaCli.heading("#3", text="Telefone")
        self.listaCli.heading("#4", text="Cidade")

        self.listaCli.column("#0", width=1)
        self.listaCli.column("#1", width=50)
        self.listaCli.column("#2", width=200)
        self.listaCli.column("#3", width=125)
        self.listaCli.column("#4", width=125)

        # Posição da lista
        self.listaCli.place(relx=0.01, rely=0.02, relwidth=0.95, relheight=0.95)

        # Criando barra de rolagem

        self.scrollLista = Scrollbar(self.frame2, orient='vertical')
        self.listaCli.configure(yscroll=self.scrollLista.set)
        self.scrollLista.place(relx=0.96, rely=0.02, relwidth=0.04, relheight=0.95)
        self.listaCli.bind("<Double-1>", self.OndoubleClick)  # Duplo click na lista

    def Menus(self):
        menubar = Menu(self.root)
        self.root.config(menu=menubar)
        filemenu = Menu(menubar)
        filemenu2 = Menu(menubar)

        def Quit(): self.root.destroy() # Função que sai do menu
        menubar.add_cascade(label = "Opções", menu= filemenu)
        menubar.add_cascade(label= "Relatorios", menu= filemenu2)

        # Adicionando as opções do menu
        filemenu.add_command(label="Sair", command= Quit) # Chamando o comando Quit para fechar a janela
        filemenu.add_command(label="Limpa Cliente", command=self.limpa_tela)

        filemenu2.add_command(label= "Ficha do Cliente", command= self.geraRelstorioCliente)


app = Application()  # Instanciando a classe
